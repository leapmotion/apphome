// Generated by CoffeeScript 1.6.3
(function() {
  var config, db, defer, exec, fs, getEmbeddedDevice, mixpanel, os, path, promise;

  exec = require("child_process").exec;

  os = require("os");

  fs = require("fs");

  path = require("path");

  db = require("./db.js");

  config = require("../../config/config.js");

  mixpanel = require("./mixpanel.js");

  defer = $.Deferred();

  promise = void 0;

  getEmbeddedDevice = function() {
    var deviceType, embeddedDevice, err, existingValue, lastAuthData, lastAuthPath;
    if (_.values(config.EmbeddedLeapTypes).indexOf(uiGlobals.embeddedDevice) !== -1) {
      return uiGlobals.embeddedDevice;
    }
    existingValue = db.fetchObj(config.DbKeys.EmbeddedLeapDevice);
    if (typeof existingValue !== "undefined") {
      return existingValue;
    }
    embeddedDevice = void 0;
    if (os.platform() === "win32") {
      try {
        lastAuthPath = path.join(config.PlatformLeapDataDirs[os.platform()], 'lastauth');
        if (!fs.existsSync(lastAuthPath)) {
          console.log("Lastauth data not found, assuming peripheral");
        } else {
          lastAuthData = window.atob(fs.readFileSync(lastAuthPath, {
            encoding: 'utf8'
          })).split(' ');
          if (!((lastAuthData != null ? lastAuthData.length : void 0) >= 2)) {
            console.log("Invalid lastauth data, assuming peripheral", lastAuthData);
          } else {
            deviceType = lastAuthData[1];
            console.log("Device type: " + deviceType);
            if (_.has(config.EmbeddedLeapTypes, deviceType)) {
              embeddedDevice = config.EmbeddedLeapTypes[deviceType];
              mixpanel.trackEvent("Embedded Leap Motion Controller Detected", {
                deviceType: embeddedDevice
              });
            }
          }
        }
      } catch (_error) {
        err = _error;
        console.error("Error reading installtype: " + err);
      }
    }
    db.saveObj(config.DbKeys.EmbeddedLeapDevice, embeddedDevice);
    return embeddedDevice;
  };

  module.exports.getEmbeddedDevice = getEmbeddedDevice;

}).call(this);

/*
//@ sourceMappingURL=embedded-leap.map
*/
