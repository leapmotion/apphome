// Generated by CoffeeScript 1.6.3
(function() {
  var config, db, fs, getTrackFn, initialize, os, registry;

  fs = require("fs");

  os = require("os");

  config = require("../../config/config.js");

  db = require("./db.js");

  registry = require("./registry.js");

  initialize = function(cb) {
    var identifyIfPossible, mixpanelDistinctId, registryKey;
    identifyIfPossible = function() {
      if (mixpanelDistinctId) {
        console.log("Using Mixpanel Distinct Id: " + mixpanelDistinctId);
        db.setItem(config.DbKeys.MixpanelDistinctId, mixpanelDistinctId);
        window.mixpanel.identify(mixpanelDistinctId);
      } else {
        console.log("Auto-generating Mixpanel Distinct Id");
      }
      return cb && cb(null);
    };
    mixpanelDistinctId = db.getItem(config.DbKeys.MixpanelDistinctId);
    if (mixpanelDistinctId) {
      return identifyIfPossible();
    } else {
      if (os.platform() === "win32") {
        registryKey = (process.env.ProgramW6432 ? "HKLM\\Software\\Wow6432Node\\LeapMotion" : "HKLM\\Software\\LeapMotion");
        return registry.readValue(registryKey, "MixPanelGUID", function(err, idFromRegistry) {
          if (!err) {
            mixpanelDistinctId = idFromRegistry;
          }
          return identifyIfPossible();
        });
      } else if (os.platform() === "darwin") {
        return fs.readFile("/Library/Application Support/Leap Motion/mpguid", {
          encoding: "utf-8"
        }, function(err, idFromFile) {
          if (!err) {
            mixpanelDistinctId = idFromFile;
          }
          return identifyIfPossible();
        });
      } else {
        return identifyIfPossible();
      }
    }
  };

  getTrackFn = function(eventName, namespace) {
    return function(args) {
      if (!/^(development|test)$/.test(process.env.LEAPHOME_ENV)) {
        console.log("Tracking Mixpanel event: " + eventName);
        namespace = namespace || uiGlobals.appName;
        return window.mixpanel.track(namespace + " - " + eventName, _.extend({
          version: uiGlobals.appVersion,
          embeddedDevice: uiGlobals.embeddedDevice
        }, args));
      } else {
        return console.log("Would have tracked Mixpanel event in a release build: " + eventName);
      }
    };
  };

  module.exports = {
    initialize: initialize,
    trackOpen: getTrackFn("Launched"),
    trackClose: getTrackFn("Closed Airspace"),
    trackSignUp: getTrackFn("Signed Up"),
    trackSignIn: getTrackFn("Signed In"),
    trackAppUpgrade: getTrackFn("Started App Update"),
    trackAppUninstall: getTrackFn("App Uninstalled Successfully"),
    trackAppReinstall: getTrackFn("Reinstalling App"),
    trackEvent: function(eventName, args, namespace) {
      return (getTrackFn(eventName, namespace))(args);
    }
  };

}).call(this);
