// Generated by CoffeeScript 1.6.3
(function() {
  var cleanupTempFiles, config, db, ensureDir, fs, newTempFilePath, newTempPlatformArchive, os, path, _deletionSet, _markAsDeleted, _trackFile, _workingSet;

  db = require("./db.js");

  path = require("path");

  os = require("os");

  fs = require("fs-extra");

  config = require("../../config/config.js");

  newTempFilePath = function(extension) {
    var filename, res, tempDir;
    extension = extension || "";
    if (!config.PlatformTempDirs[os.platform()]) {
      throw new Error("Unknown operating system: " + os.platform());
    }
    tempDir = config.PlatformTempDirs[os.platform()];
    filename = ["Airspace", (new Date()).getTime(), Math.random()].join("_") + "." + extension.replace(/^\./, "");
    res = path.join(tempDir, filename);
    _trackFile(res);
    return res;
  };

  newTempPlatformArchive = function() {
    return newTempFilePath((os.platform() === "darwin" ? "dmg" : "zip"));
  };

  _workingSet = function() {
    return db.fetchObj(config.DbKeys.ActiveTempFilesKey) || {};
  };

  _deletionSet = function() {
    return db.fetchObj(config.DbKeys.TempFilesNeedingDeletionKey) || {};
  };

  _trackFile = function(filePath) {
    var all;
    if (!filePath) {
      return;
    }
    all = _workingSet();
    all[filePath] = true;
    return db.saveObj(config.DbKeys.ActiveTempFilesKey, all);
  };

  _markAsDeleted = function(filePath) {
    var all;
    if (!filePath) {
      return;
    }
    all = _deletionSet();
    delete all[filePath];
    return db.saveObj(config.DbKeys.TempFilesNeedingDeletionKey, all);
  };

  cleanupTempFiles = function(cb) {
    var sequentialRemove, toDelete;
    toDelete = _(_.extend({}, _workingSet(), _deletionSet())).keys();
    db.saveObj(config.DbKeys.ActiveTempFilesKey, {});
    sequentialRemove = function() {
      var nextFile;
      if (!toDelete.length) {
        return;
      }
      nextFile = toDelete.shift();
      return fs.exists(nextFile, function(doesExist) {
        if (doesExist) {
          return fs.remove(nextFile, function(err) {
            if (err) {
              console.error("Unable to delete temp file " + nextFile + ": " + (err.stack || err));
            }
            _markAsDeleted(nextFile);
            return sequentialRemove();
          });
        } else {
          _markAsDeleted(nextFile);
          return sequentialRemove();
        }
      });
    };
    setTimeout(sequentialRemove, 5000);
    return typeof cb === "function" ? cb(null) : void 0;
  };

  ensureDir = function(dirpath, cb) {
    return fs.exists(dirpath, function(doesExist) {
      if (!doesExist) {
        return fs.mkdirs(dirpath, function(mkdirErr) {
          return typeof cb === "function" ? cb(mkdirErr) : void 0;
        });
      } else {
        return typeof cb === "function" ? cb(null) : void 0;
      }
    });
  };

  module.exports.newTempFilePath = newTempFilePath;

  module.exports.newTempPlatformArchive = newTempPlatformArchive;

  module.exports.ensureDir = ensureDir;

  module.exports.cleanupTempFiles = cleanupTempFiles;

}).call(this);
