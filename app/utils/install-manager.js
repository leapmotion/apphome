// Generated by CoffeeScript 1.6.3
(function() {
  var LeapApp, MaxConsecutiveFailures, cancelAll, dequeue, enqueue, installQueue, mixpanel, showAppropriateDownloadControl;

  mixpanel = require("../utils/mixpanel.js");

  LeapApp = require("../models/leap-app.js");

  MaxConsecutiveFailures = 3;

  installQueue = [];

  enqueue = function(app, cb, skipToFront) {
    var queueData;
    if (app.get("state") === LeapApp.States.Uninstalled) {
      mixpanel.trackAppReinstall();
    }
    app.set("state", LeapApp.States.Waiting);
    queueData = {
      app: app,
      cb: cb,
      failureCount: 0
    };
    if (skipToFront && installQueue.length > 0) {
      installQueue.splice(1, 0, queueData);
    } else {
      installQueue.push(queueData);
    }
    if (installQueue.length === 1) {
      dequeue();
    }
    return showAppropriateDownloadControl();
  };

  dequeue = function() {
    var queuedItem;
    queuedItem = installQueue[0];
    if (queuedItem) {
      queuedItem.app.install(function(err) {
        var maxFailuresExceeded;
        if (err && !err.cancelled) {
          queuedItem.failureCount++;
        }
        maxFailuresExceeded = queuedItem.failureCount >= MaxConsecutiveFailures;
        if (!err || err.cancelled || maxFailuresExceeded) {
          if (maxFailuresExceeded) {
            console.warn("Gave up trying to install " + queuedItem.app.get("name") + " after " + queuedItem.failureCount + " consecutive errors.");
          }
          installQueue.shift();
        }
        queuedItem.app.off("change:state", showAppropriateDownloadControl);
        showAppropriateDownloadControl();
        if (_.isFunction(queuedItem.cb)) {
          queuedItem.cb.apply(this, arguments);
        }
        return dequeue();
      });
      return queuedItem.app.on("change:state", showAppropriateDownloadControl);
    }
  };

  showAppropriateDownloadControl = function(fade) {
    var $control, downloading, downloads, updates;
    updates = 0;
    downloads = 0;
    downloading = 0;
    $control = void 0;
    $(".download-control").hide();
    uiGlobals.myApps.forEach(function(app) {
      var appState;
      appState = app.get("state");
      if (app.isUpdatable()) {
        return updates++;
      } else if (appState === LeapApp.States.NotYetInstalled) {
        return downloads++;
      } else {
        if (appState === LeapApp.States.Waiting || appState === LeapApp.States.Connecting || appState === LeapApp.States.Downloading) {
          return downloading++;
        }
      }
    });
    if (installQueue.length > 0) {
      if (downloading > 0) {
        if (fade === true) {
          $("#cancel-all").fadeIn("slow");
        } else {
          $("#cancel-all").show();
        }
      }
    } else if (updates > 0) {
      $control = $("#update-all");
    } else {
      if (downloads > 0) {
        $control = $("#download-all");
      }
    }
    if ($control) {
      if (fade === true) {
        return $control.fadeIn("slow");
      } else {
        return $control.show();
      }
    }
  };

  cancelAll = function() {
    var app, i, len;
    i = 0;
    len = installQueue.length;
    while (i < len - 1) {
      app = installQueue.pop().app;
      if (app.hasUpdate() && app.get("state") === LeapApp.States.Waiting) {
        app.set("state", LeapApp.States.Ready);
      } else {
        app.set("state", LeapApp.States.NotYetInstalled);
      }
      i++;
    }
    if (installQueue.length) {
      return installQueue[0].app.trigger("cancel-download");
    }
  };

  module.exports.enqueue = enqueue;

  module.exports.cancelAll = cancelAll;

  module.exports.showAppropriateDownloadControl = showAppropriateDownloadControl;

}).call(this);
