// Generated by CoffeeScript 1.7.1
(function() {
  var GA_PROPERTY_ID, config, db, fs, getTrackFn, initialize, os, registry, ua, visitor;

  fs = require("fs");

  os = require("os");

  config = require("../../config/config.js");

  db = require("./db.js");

  registry = require("./registry.js");

  GA_PROPERTY_ID = 'UA-31536531-9';

  ua = require('universal-analytics');

  visitor = null;

  initialize = function(cb) {
    var identifyIfPossible, mixpanelDistinctId, registryKey;
    identifyIfPossible = function() {
      if (mixpanelDistinctId) {
        console.log("Using Google Analytics Distinct Id: " + mixpanelDistinctId);
        db.setItem(config.DbKeys.MixpanelDistinctId, mixpanelDistinctId);
      }
      visitor = ua(GA_PROPERTY_ID, mixpanelDistinctId, {
        strictCidFormat: false
      });
      return typeof cb === "function" ? cb(null) : void 0;
    };
    mixpanelDistinctId = db.getItem(config.DbKeys.MixpanelDistinctId);
    if (mixpanelDistinctId) {
      return identifyIfPossible();
    } else {
      if (os.platform() === "win32") {
        registryKey = (process.env.ProgramW6432 ? "HKLM\\Software\\Wow6432Node\\LeapMotion" : "HKLM\\Software\\LeapMotion");
        return registry.readValue(registryKey, "MixPanelGUID", function(err, idFromRegistry) {
          if (!err) {
            mixpanelDistinctId = idFromRegistry;
          }
          return identifyIfPossible();
        });
      } else if (os.platform() === "darwin") {
        return fs.readFile("/Library/Application Support/Leap Motion/mpguid", {
          encoding: "utf-8"
        }, function(err, idFromFile) {
          if (!err) {
            mixpanelDistinctId = idFromFile;
          }
          return identifyIfPossible();
        });
      } else {
        return identifyIfPossible();
      }
    }
  };

  getTrackFn = function(eventName, namespace) {
    return function(args) {
      var embedded_text, page_title, page_url;
      if (true || /^(development|test)$/.test(process.env.LEAPHOME_ENV)) {
        if (!(uiGlobals.metricsDisabled && visitor !== null)) {
          console.log("Tracking Google Analytics event: " + eventName);
          namespace = namespace || uiGlobals.appName;
          namespace = namespace.toLowerCase().replace(' ', '_');
          eventName = eventName.toLowerCase().replace(' ', '_');
          embedded_text = uiGlobals.embeddedDevice ? '| embedded' : '';
          page_url = '/' + namespace + '/' + uiGlobals.appVersion + '/' + eventName;
          page_title = uiGlobals.appName + ' (' + uiGlobals.appVersion + ') ' + embedded_text;
          return visitor.pageview(page_url, page_title, page_title).send();
        } else {
          return console.log("Would have tracked Google Analytics event, but metrics are disabled.");
        }
      } else {
        return console.log("Would have tracked Google Analytics event in a release build: " + eventName);
      }
    };
  };

  module.exports = {
    initialize: initialize,
    trackOpen: getTrackFn("launched"),
    trackClose: getTrackFn("exit"),
    trackSignUp: getTrackFn("signed_up"),
    trackSignIn: getTrackFn("signed_in"),
    trackEvent: function(eventName, args, namespace) {
      return (getTrackFn(eventName, namespace))(args);
    }
  };

}).call(this);
