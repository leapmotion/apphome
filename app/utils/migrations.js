// Generated by CoffeeScript 1.6.3
(function() {
  var LeapApp, Migrations, config, db, migrate, os, path, v0_to_v1, v1_to_v2, v2_to_v3;

  db = require("./db.js");

  os = require("os");

  path = require("path");

  config = require("../../config/config.js");

  LeapApp = require("../models/leap-app.js");

  /*
  These are localStorage database migrations.  They're kicked off when the
  bootstrapping code detects that the client's localStorage database schema is
  out of date.
  
  Each migration only goes from the previous version to the next version, so They
  need to be run in order.
  */


  Migrations = [
    v0_to_v1 = function() {
      var appJsonList, myAppsJson, sortApp, uninstalledAppsJson;
      uninstalledAppsJson = [];
      myAppsJson = [];
      appJsonList = db.fetchObj(config.DbKeys.InstalledApps) || [];
      appJsonList.forEach(sortApp = function(appJson) {
        if (appJson.state === LeapApp.States.Uninstalled) {
          return uninstalledAppsJson.push(appJson);
        } else {
          return myAppsJson.push(appJson);
        }
      });
      db.saveObj(config.DbKeys.InstalledApps, myAppsJson);
      return db.saveObj(config.DbKeys.UninstalledApps, uninstalledAppsJson);
    }, v1_to_v2 = function() {
      var myAppsJson, uninstalledAppsJson;
      myAppsJson = db.fetchObj(config.DbKeys.InstalledApps);
      uninstalledAppsJson = db.fetchObj(config.DbKeys.UninstalledApps);
      uninstalledAppsJson.forEach(LeapApp.abstractUserHomeDir);
      myAppsJson.forEach(LeapApp.abstractUserHomeDir);
      db.saveObj(config.DbKeys.InstalledApps, myAppsJson);
      return db.saveObj(config.DbKeys.UninstalledApps, uninstalledAppsJson);
    }, v2_to_v3 = function() {
      var appJson, myAppsJson, uninstalledAppsJson, _i, _j, _len, _len1;
      myAppsJson = db.fetchObj(config.DbKeys.InstalledApps);
      uninstalledAppsJson = db.fetchObj(config.DbKeys.UninstalledApps);
      for (_i = 0, _len = myAppsJson.length; _i < _len; _i++) {
        appJson = myAppsJson[_i];
        _.extend(appJson, {
          cleaned: true
        });
      }
      for (_j = 0, _len1 = uninstalledAppsJson.length; _j < _len1; _j++) {
        appJson = uninstalledAppsJson[_j];
        _.extend(appJson, {
          cleaned: true
        });
      }
      db.saveObj(config.DbKeys.InstalledApps, myAppsJson);
      return db.saveObj(config.DbKeys.UninstalledApps, uninstalledAppsJson);
    }
  ];

  migrate = function() {
    var applyMigration, currentDbVersion;
    if (!db.fetchObj(config.DbKeys.DbVersion)) {
      db.saveObj(config.DbKeys.DbVersion, 0);
    }
    console.log("Checking if database needs to be migrated");
    currentDbVersion = db.fetchObj(config.DbKeys.DbVersion);
    if (currentDbVersion < Migrations.length) {
      console.log("Migrating database from version " + currentDbVersion + " to version " + Migrations.length);
      Migrations.slice(currentDbVersion).forEach(applyMigration = function(migration) {
        return migration();
      });
      return db.saveObj(config.DbKeys.DbVersion, Migrations.length);
    } else {
      return console.log("Database already at version " + currentDbVersion);
    }
  };

  module.exports.migrate = migrate;

}).call(this);

/*
//@ sourceMappingURL=migrations.map
*/
