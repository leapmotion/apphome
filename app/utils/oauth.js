// Generated by CoffeeScript 1.6.3
(function() {
  var AuthorizationView, accessToken, accessTokenExpiry, authorizeWithCode, config, db, getAccessToken, getAuthorizationUrl, getRefreshToken, httpHelper, logOut, logOutUrl, oauthRequest, promptForLogin, promptingForLogin, qs, saveRefreshToken, url;

  httpHelper = require("./http-helper.js");

  qs = require("querystring");

  url = require("url");

  config = require("../../config/config.js");

  db = require("./db.js");

  AuthorizationView = require("../views/authorization/authorization.js");

  saveRefreshToken = function(refreshToken) {
    return db.setItem(config.DbKeys.OauthRefreshToken, refreshToken);
  };

  getRefreshToken = function() {
    return db.getItem(config.DbKeys.OauthRefreshToken);
  };

  getAuthorizationUrl = function() {
    var params;
    params = {
      response_type: "code",
      client_id: config.oauth.client_id,
      redirect_uri: config.oauth.redirect_uri
    };
    return config.oauth.endpoint + "authorize/?" + qs.stringify(params);
  };

  oauthRequest = function(params, cb) {
    var urlParts;
    params = _.extend({}, params, {
      client_id: config.oauth.client_id,
      client_secret: config.oauth.client_key,
      redirect_uri: config.oauth.redirect_uri
    });
    urlParts = url.parse(config.oauth.endpoint);
    urlParts.pathname += "token";
    return httpHelper.post(url.format(urlParts), params).then(function(data) {
      return data = JSON.parse(data);
    }).nodeify(cb);
  };

  authorizeWithCode = function(code, cb) {
    return oauthRequest({
      grant_type: "authorization_code",
      code: code
    }, function(err, result) {
      if (err) {
        return typeof cb === "function" ? cb(err) : void 0;
      } else if (result.error) {
        return typeof cb === "function" ? cb(new Error(result.error_description)) : void 0;
      } else {
        saveRefreshToken(result.refresh_token);
        return typeof cb === "function" ? cb(null) : void 0;
      }
    });
  };

  promptingForLogin = void 0;

  promptForLogin = function(cb) {
    var authorizationView;
    promptingForLogin = true;
    if (uiGlobals.mainPageView) {
      uiGlobals.mainPageView.$el.remove();
      uiGlobals.mainPageView.remove();
    }
    authorizationView = new AuthorizationView();
    return authorizationView.authorize(function(err) {
      if (err) {
        console.warn("Error logging in: " + err.stack || err);
      }
      authorizationView.remove();
      require('./window-chrome.js').paintMainPage();
      promptingForLogin = false;
      return typeof cb === "function" ? cb(null) : void 0;
    });
  };

  accessTokenExpiry = void 0;

  accessToken = void 0;

  getAccessToken = function(cb) {
    var now;
    now = (new Date()).getTime();
    if (accessToken && accessTokenExpiry && (now < accessTokenExpiry)) {
      console.log("Using cached OAUTH access token.");
      if (typeof cb === "function") {
        cb(null, accessToken);
      }
      return;
    }
    console.log("Getting OAUTH access token.");
    if (!getRefreshToken() && !promptingForLogin) {
      return promptForLogin(function() {
        return getAccessToken(cb);
      });
    } else {
      return oauthRequest({
        grant_type: "refresh_token",
        refresh_token: getRefreshToken()
      }, function(err, result) {
        if (err) {
          return typeof cb === "function" ? cb(err) : void 0;
        } else if (result.error) {
          if (promptingForLogin) {
            return typeof cb === "function" ? cb(new Error(result.error)) : void 0;
          } else {
            return promptForLogin(function() {
              return getAccessToken(cb);
            });
          }
        } else {
          accessToken = result.access_token;
          accessTokenExpiry = now + config.oauth.auth_token_expiration_time;
          return typeof cb === "function" ? cb(null, accessToken) : void 0;
        }
      });
    }
  };

  logOut = function() {
    db.removeItem(config.DbKeys.OauthRefreshToken);
    return accessToken = null;
  };

  logOutUrl = function() {
    return config.oauth.log_out_url;
  };

  module.exports.getAuthorizationUrl = getAuthorizationUrl;

  module.exports.getRefreshToken = getRefreshToken;

  module.exports.authorizeWithCode = authorizeWithCode;

  module.exports.getAccessToken = getAccessToken;

  module.exports.logOut = logOut;

  module.exports.logOutUrl = logOutUrl;

}).call(this);

/*
//@ sourceMappingURL=oauth.map
*/
