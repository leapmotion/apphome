// Generated by CoffeeScript 1.6.3
(function() {
  var PlatformOutputPaths, async, fs, os, path, writeXml, xmlTemplate, _checkContent, _ensureDirectory, _generateXml, _writeXmlToDisk;

  fs = require("fs-extra");

  path = require("path");

  os = require("os");

  async = require("async");

  xmlTemplate = fs.readFileSync(path.join(__dirname, "..", "..", "config", "tt.xml.template"), "utf-8");

  PlatformOutputPaths = {
    darwin: [process.env.HOME, "Library", "Preferences", "DSS", "auth.plist"],
    win32: [process.env.APPDATA, "Leap Motion", "tt.xml"]
  };

  _generateXml = function(authId, token) {
    return xmlTemplate.replace("@AUTHID", authId).replace("@TOKEN", token);
  };

  writeXml = function(authId, token) {
    var ctx, outputPath;
    if (!PlatformOutputPaths[os.platform()]) {
      console.warn("DRM not supported for platform: " + os.platform());
      return;
    }
    outputPath = path.join.apply(null, PlatformOutputPaths[os.platform()]);
    if (outputPath) {
      ctx = {
        outputPath: outputPath,
        outputDir: path.dirname(outputPath),
        authId: authId,
        token: token
      };
      return async.waterfall([
        function(next) {
          return next(null, ctx);
        }, _ensureDirectory, _checkContent, _writeXmlToDisk
      ], function(err, ctx) {
        if (err) {
          return console.error("Cannot write DRM XML: " + (err.stack || err));
        }
      });
    }
  };

  _ensureDirectory = function(ctx, next) {
    return fs.mkdirs(ctx.outputDir, function(mkdirErr) {
      return next && next(mkdirErr, ctx);
    });
  };

  _checkContent = function(ctx, next) {
    return fs.exists(ctx.outputPath, function(doesExist) {
      if (!doesExist) {
        console.log("Need to create DRM file: " + ctx.outputPath);
        ctx.needsWriting = true;
        return next && next(null, ctx);
      } else {
        return fs.readFile(ctx.outputPath, function(err, data) {
          if (!err) {
            ctx.needsWriting = !(new RegExp(ctx.token)).test(data);
          } else {
            ctx.needsWriting = true;
          }
          console.log("DRM " + (ctx.needsWriting ? "needs" : "does not need") + " updating.");
          return next && next(null, ctx);
        });
      }
    });
  };

  _writeXmlToDisk = function(ctx, next) {
    if (ctx.needsWriting) {
      console.log("Writing DRM file to " + ctx.outputPath);
      return fs.writeFile(ctx.outputPath, _generateXml(ctx.authId, ctx.token), function(err) {
        return next(err, ctx);
      });
    } else {
      return next(null, ctx);
    }
  };

  module.exports.writeXml = writeXml;

}).call(this);

/*
//@ sourceMappingURL=drm.map
*/
