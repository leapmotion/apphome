// Generated by CoffeeScript 1.6.3
(function() {
  var Q, XHRDownloadStream, config, fs, getJson, getToDisk, os, path, post, qs, url, workingFile;

  fs = require("fs");

  os = require("os");

  path = require("path");

  qs = require("querystring");

  url = require("url");

  Q = require("q");

  config = require("../../config/config.js");

  workingFile = require("./working-file.js");

  XHRDownloadStream = require("./xhr-download-stream.js");

  getToDisk = function(targetUrl, opts, cb) {
    var deferred, destPath, downloadStream, urlParts, writeStream;
    deferred = Q.defer();
    opts = opts || {};
    if (!targetUrl) {
      return cb(new Error("No source url specified."));
    }
    if (!cb && _.isFunction(opts)) {
      cb = opts;
      opts = {};
    }
    if (opts.accessToken) {
      urlParts = url.parse(targetUrl, true);
      urlParts.query.access_token = opts.accessToken;
      targetUrl = url.format(urlParts);
    }
    destPath = opts.destPath || workingFile.newTempPlatformArchive();
    downloadStream = new XHRDownloadStream(targetUrl, config.DownloadChunkSize);
    writeStream = fs.createWriteStream(destPath);
    downloadStream.on('error', function(err) {
      console.warn("Downloading chunk failed: " + (err.stack || err) + " (" + targetUrl + ")");
      return deferred.reject(err);
    });
    writeStream.on('error', function(err) {
      console.warn("Writing chunk failed: " + (err.stack || err) + " (" + destPath + ")");
      return deferred.reject(err);
    });
    downloadStream.pipe(writeStream);
    writeStream.on('finish', function() {
      var err;
      if (downloadStream.cancelled != null) {
        try {
          if (fs.existsSync(destPath)) {
            fs.unlinkSync(destPath);
          }
        } catch (_error) {
          err = _error;
          console.warn("Could not cleanup cancelled download: " + (err.stack || err));
          deferred.reject(err);
        }
        err = new Error("Cancelled download of " + targetUrl);
        err.cancelled = true;
        return deferred.reject(err);
      } else {
        return deferred.resolve(destPath.toString());
      }
    });
    deferred.promise.nodeify(cb);
    return downloadStream.progressStream;
  };

  getJson = function(targetUrl) {
    return Q(window.$.getJSON(targetUrl)).then(function(json) {
      nwGui.App.clearCache();
      return json;
    });
  };

  post = function(targetUrl, data, cb) {
    var xhr;
    xhr = new window.XMLHttpRequest();
    xhr.open("POST", targetUrl);
    xhr.setRequestHeader("Content-type", "application/x-www-form-urlencoded");
    xhr.onload = function() {
      nwGui.App.clearCache();
      if (typeof cb === "function") {
        cb(null, this.responseText);
      }
      return cb = null;
    };
    xhr.onerror = function(err) {
      if (typeof cb === "function") {
        cb(err);
      }
      return cb = null;
    };
    return xhr.send(qs.stringify(data));
  };

  module.exports.getToDisk = getToDisk;

  module.exports.getJson = getJson;

  module.exports.post = post;

}).call(this);

/*
//@ sourceMappingURL=http-helper.map
*/
