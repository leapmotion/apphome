// Generated by CoffeeScript 1.6.3
(function() {
  var MainPage, PlatformControlPanelPaths, api, appWindowBindings, authorizationUtil, buildAccountMenu, buildFileMenu, buildHelpMenu, config, db, fs, i18n, maximizeWindow, mixpanel, os, paintMainPage, path, popup, rebuildMenuBar, tutorial;

  fs = require("fs");

  os = require("os");

  path = require("path");

  api = require("./api.js");

  authorizationUtil = require("./authorization-util.js");

  config = require("../../config/config.js");

  db = require("./db.js");

  i18n = require("./i18n.js");

  mixpanel = require("./mixpanel.js");

  popup = require("../views/popups/popup.js");

  tutorial = require("./tutorial.js");

  MainPage = require("../views/main-page/main-page.js");

  appWindowBindings = function() {
    uiGlobals.on(uiGlobals.Event.SignIn, function() {
      return rebuildMenuBar(true);
    });
    $("body").on("click", "a", function(evt) {
      var href;
      evt.preventDefault();
      href = $(this).attr("href");
      if (href) {
        return nwGui.Shell.openExternal(href);
      }
    });
    nwGui.Window.get().on("close", function() {
      this.hide();
      this.close(true);
      return process.exit();
    });
    return process.on("exit", mixpanel.trackClose);
  };

  PlatformControlPanelPaths = {
    win32: (process.env["PROGRAMFILES(X86)"] || process.env.PROGRAMFILES) + "\\Leap Motion\\Core Services\\LeapControlPanel.exe"
  };

  maximizeWindow = function() {
    var win;
    win = nwGui.Window.get();
    win.maximize();
    win.show();
    return win.focus();
  };

  paintMainPage = function() {
    if (uiGlobals.mainPageView) {
      console.info("Redrawing main app");
      uiGlobals.mainPageView.$el.remove();
    }
    uiGlobals.mainPageView = new MainPage();
    return $("body").append(uiGlobals.mainPageView.$el);
  };

  buildFileMenu = function() {
    var fileMenu;
    fileMenu = new nwGui.Menu();
    fileMenu.append(new nwGui.MenuItem({
      label: i18n.translate("Controller Settings"),
      click: function() {
        return nwGui.Shell.openItem(PlatformControlPanelPaths.win32);
      }
    }));
    fileMenu.append(new nwGui.MenuItem({
      label: i18n.translate("Exit"),
      click: function() {
        return nwGui.Window.get().emit("close");
      }
    }));
    return new nwGui.MenuItem({
      label: i18n.translate("File"),
      submenu: fileMenu
    });
  };

  buildAccountMenu = function(enableLogOut, disableSetInstallDir) {
    var accountMenu;
    accountMenu = new nwGui.Menu();
    accountMenu.append(new nwGui.MenuItem({
      label: i18n.translate("Sign Out %1$s").fetch((enableLogOut ? uiGlobals.username || uiGlobals.email : "")),
      click: authorizationUtil.logOutUser,
      enabled: !!enableLogOut
    }));
    accountMenu.append(new nwGui.MenuItem({
      label: i18n.translate("Set Install Directory..."),
      click: function() {
        return $("input#installLocation").trigger("click");
      },
      enabled: !disableSetInstallDir
    }));
    return new nwGui.MenuItem({
      label: i18n.translate("Account"),
      submenu: accountMenu
    });
  };

  buildHelpMenu = function(enableLogOut) {
    var helpMenu;
    helpMenu = new nwGui.Menu();
    helpMenu.append(new nwGui.MenuItem({
      label: i18n.translate("Getting Started..."),
      click: function() {
        return nwGui.Shell.openExternal(config.GettingStartedUrl);
      }
    }));
    helpMenu.append(new nwGui.MenuItem({
      label: i18n.translate("Launch Tutorial..."),
      click: function() {
        return tutorial.start();
      },
      enabled: !!enableLogOut
    }));
    helpMenu.append(new nwGui.MenuItem({
      label: i18n.translate("Community Forums..."),
      click: function() {
        return nwGui.Shell.openExternal(config.CommunityForumsUrl);
      }
    }));
    helpMenu.append(new nwGui.MenuItem({
      label: i18n.translate("Get Support..."),
      click: function() {
        return nwGui.Shell.openExternal(config.GetSupportUrl);
      }
    }));
    helpMenu.append(new nwGui.MenuItem({
      label: i18n.translate("About Airspace Home"),
      click: function() {
        return popup.open("about");
      }
    }));
    return new nwGui.MenuItem({
      label: i18n.translate("Help"),
      submenu: helpMenu
    });
  };

  rebuildMenuBar = function(enableLogOut, disableSetInstallDir) {
    var createFileInput, helpMenuItem, mainMenu, nwworkingdir;
    mainMenu = new nwGui.Menu({
      type: "menubar"
    });
    if (os.platform() === "win32") {
      mainMenu.append(buildFileMenu());
    }
    mainMenu.append(buildAccountMenu(enableLogOut, disableSetInstallDir));
    createFileInput = function(defaultDir) {
      var $fileInput;
      $("input#installLocation").remove();
      $fileInput = $("<input>").attr({
        id: "installLocation",
        type: "file",
        nwdirectory: true,
        nwworkingdir: defaultDir,
        style: "display:none;"
      });
      return $fileInput.appendTo("body");
    };
    if (!disableSetInstallDir) {
      nwworkingdir = db.fetchObj(config.DbKeys.AppInstallDir) || path.join.apply(null, config.PlatformAppDirs[os.platform()]);
      console.log("Current install directory: " + nwworkingdir);
      createFileInput(nwworkingdir);
    }
    $("input#installLocation").change(function() {
      var installLocationInput, newAppDir;
      newAppDir = $(this).val();
      if (!newAppDir) {
        console.log("Reported a blank new install location.  Not moving anything.");
        return;
      }
      installLocationInput = $("input#installLocation");
      installLocationInput.remove();
      rebuildMenuBar(true, true);
      console.log("Changing app install location to " + newAppDir);
      db.saveObj(config.DbKeys.AppInstallDir, newAppDir);
      return uiGlobals.myApps.move(newAppDir, function() {
        console.log("~~~~~~~~~~~~~ MOVE COMPLETE ~~~~~~~~~~~~~~");
        return rebuildMenuBar(true);
      });
    });
    helpMenuItem = buildHelpMenu(enableLogOut);
    if (os.platform() === 'win32') {
      mainMenu.append(helpMenuItem);
    }
    nwGui.Window.get().menu = mainMenu;
    if (os.platform() === 'darwin') {
      return mainMenu.append(helpMenuItem);
    }
  };

  appWindowBindings();

  module.exports.maximizeWindow = maximizeWindow;

  module.exports.rebuildMenuBar = rebuildMenuBar;

  module.exports.paintMainPage = paintMainPage;

}).call(this);

/*
//@ sourceMappingURL=window-chrome.map
*/
