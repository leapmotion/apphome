#!/usr/bin/env node
var async = require('async');
var exec = require('child_process').exec;
var fs = require('fs-extra');
var os = require('os');
var path = require('path');

var config = require('../config/config.js');
var shell = require('../app/utils/shell.js');

var packageJson = JSON.parse(fs.readFileSync(path.join(__dirname, '..', 'package.json')));
packageJson.window.toolbar = false;
if (process.argv[2]) {
  packageJson.version = process.argv[2];
}
delete packageJson.devDependencies;
delete packageJson.scripts;

function buildDir(subdir) {
  var buildDir = path.join(__dirname, '..', 'build', subdir || '');
  if (!fs.existsSync(buildDir)) {
    fs.mkdirpSync(buildDir);
  }
  return buildDir;
}

function prodDependencies() {
  var deps = Object.keys(packageJson.dependencies);
  return deps.map(function(dep) {
    return path.join('node_modules', dep);
  });
}

var appManifest = [
  'app/',
  'config/',
  'index.html',
  'node-main.js',
  'static/'
].concat(prodDependencies());

if (os.platform() === 'win32') {
  appManifest.push('bin/IconExtractor.exe');
  appManifest.push('bin/unzip.exe');
} else if (os.platform() === 'darwin') {
  appManifest.push('bin/PreferredLocalization');
}

console.log('Using output dir: ' + buildDir());
fs.deleteSync(buildDir());

var pngIconPath = path.join.apply(path, [ __dirname, '..' ].concat(packageJson.window.icon.split('/')));
var icoIconPath = pngIconPath.replace(/\.png$/, '.ico');
var icnsIconPath = pngIconPath.replace(/\.png$/, '.icns');

function setFullVersionNumber(cb) {
  if (!/-/.test(packageJson.version)) { // if there's no patch metadata already, add the git hash id
    exec('git rev-parse --verify HEAD', function(err, stdout, stderr) {
      if (err) {
        console.log('stdout: ' + stdout);
        console.log('stderr: ' + stderr);
        return cb(err);
      }
      packageJson.version += '-' + stdout.substr(0, 6);
      cb(null)
    });
  } else {
    cb(null);
  }
}

function copyFileSync(source, dest) {
  fs.mkdirpSync(path.dirname(dest));
  fs.writeFileSync(dest, fs.readFileSync(source), { mode: fs.statSync(source).mode });
  if (source.indexOf('bin/') == 0) {
    fs.chmodSync(dest, "777");
  }
}

function copyFilesToDir(dir) {
  var copiedManifest = appManifest.slice(0);

  console.log('package.json');
  fs.mkdirpSync(dir);
  fs.writeFileSync(path.join(dir, 'package.json'), JSON.stringify(packageJson, null, 2));

  while (copiedManifest.length > 0) {
    var fileToInclude = copiedManifest.shift();
    var fullPath = path.join(__dirname, '..', fileToInclude);
    if (fs.statSync(fullPath).isDirectory()) {
      if (fullPath.toLowerCase().indexOf("test") == -1) {
        fs.readdirSync(fullPath).forEach(function(file) {
          copiedManifest.push(path.join(fileToInclude, file));
        });
      }
    } else if (path.basename(fileToInclude).toLowerCase().indexOf("test") == -1) {
      console.log(fileToInclude);
      copyFileSync(fullPath, path.join(dir, fileToInclude));
    }
  }
}

function buildForWindows(cb) {
  var platform = 'windows';

  if (os.platform() !== 'win32') {
    console.log('Building for Windows must be done on Windows, unfortunately.');
    return cb(null);
  }

  function getExecFn(command) {
    return function execFn(cb, retriesLeft) {
      if (typeof retriesLeft === 'undefined') {
        retriesLeft = 2;
      }
      console.log(command);
      exec(command, function(err, stdout, stderr) {
        if (err) {
          if (retriesLeft > 0) {
            execFn(cb, retriesLeft - 1);
          } else {
            console.log('stdout: ' + stdout);
            console.log('stderr: ' + stderr);
            return cb(err);
          }
        }
        cb(null);
      });
    };
  }

  fs.copy(path.join(config.PlatformLibrariesDir[os.platform()], 'node-webkit-v' + packageJson.nwVersion  +  '-win-ia32'), buildDir(platform), function(err) {
    if (err) {
      return cb(err);
    }
    copyFilesToDir(buildDir(platform));
    if (fs.existsSync(path.join(buildDir(platform), 'debug.log'))) {
      fs.unlinkSync(path.join(buildDir(platform), 'debug.log'));
    }
    fs.unlinkSync(path.join(buildDir(platform), 'nwsnapshot.exe'));
    var exePath = path.join(buildDir(platform), 'nw.exe');
    var clearIconCommand = shell.escape(path.join(__dirname, 'RCEDIT.exe')) + ' /C ' + shell.escape(exePath);
    var setIconCommand = shell.escape(path.join(__dirname, 'RCEDIT.exe')) + ' /I ' + shell.escape(exePath) + ' ' + shell.escape(icoIconPath);
    var setExeDetailsCommand = shell.escape(path.join(__dirname, 'verpatch.exe')) + ' ' + shell.escape(exePath) +
                               ' /high /va ' + shell.escape(packageJson.version) +
                               ' /s copyright ' + shell.escape((new Date).getFullYear()) +
                               ' /s company ' + shell.escape(packageJson.company) +
                               ' /s product ' + shell.escape(packageJson.fullName) +
                               ' /s description ' + shell.escape(packageJson.description);

    async.series([
      getExecFn(clearIconCommand),
      getExecFn(setIconCommand),
      getExecFn(setExeDetailsCommand),
      function (cb) {
        fs.copy(path.join(__dirname, '..', 'script', 'Airspace_NoGPU.cmd'), path.join(buildDir(platform), 'Airspace_NoGPU.cmd'), cb);
      }
    ], function(err) {
      if (err) {
        return cb(err);
      }

      fs.renameSync(exePath, path.join(buildDir(platform), packageJson.name + '.exe'));
      console.log('Wrote Windows version ' + packageJson.version + ' to: ' + buildDir(platform));
      cb(null);
    });
  });
}

function buildForMac(cb) {
  var platform = 'osx';

  if (os.platform() !== 'darwin') {
    console.log('Building for OSX must be done on OSX, unfortunately.');
    return cb(null);
  }

  function changePlistString(plist, key, newValue) {
    var searchRegex = new RegExp('(<key>' + key + '<\\/key>\\s*<string>)[^<]*(<\\/string>)');
    return plist.replace(searchRegex, '$1' + newValue + '$2');
  }

  function addAirspaceProtocolHandler(plist) {
    var plistEndRegex = /<\/dict>\s+<\/plist>\s*$/;
    var r = [];
    r.push('  <key>CFBundleURLTypes</key>');
    r.push('  <array>');
    r.push('    <dict>');
    r.push('      <key>CFBundleURLName</key>');
    r.push('      <string>Airspace</string>');
    r.push('      <key>CFBundleURLSchemes</key>');
    r.push('      <array>');
    r.push('        <string>airspace</string>');
    r.push('      </array>');
    r.push('    </dict>');
    r.push('  </array>');
    r.push('</dict>');
    r.push('</plist>');

    return plist.replace(plistEndRegex, r.join('\n'));
  }

  fs.copy(path.join(config.PlatformLibrariesDir[os.platform()], 'node-webkit-v' + packageJson.nwVersion + '-osx-ia32', 'node-webkit.app'), path.join(buildDir(platform), packageJson.name + '.app'), function(err) {
    if (err) {
      return cb(err);
    }

    copyFilesToDir(path.join(buildDir(platform), packageJson.name + '.app', 'Contents', 'Resources', 'app.nw'));

    var icon = fs.readFileSync(icnsIconPath);
    fs.writeFileSync(path.join(buildDir(platform), packageJson.name + '.app', 'Contents', 'Resources', packageJson.name + '.icns'), icon);
    fs.unlinkSync(path.join(buildDir(platform), packageJson.name + '.app', 'Contents', 'Resources', 'nw.icns'));
    fs.copy(path.join(__dirname, '..', 'script', 'node-webkit-no-gpu'), path.join(buildDir(platform), packageJson.name + '.app', 'Contents', 'MacOS', 'node-webkit-no-gpu'), function(err) {
      if (err) {
        return cb(err);
      }

      var infoPlistPath = path.join(buildDir(platform), packageJson.name + '.app', 'Contents', 'Info.plist');
      var plist = fs.readFileSync(infoPlistPath, 'utf-8');
      plist = changePlistString(plist, 'CFBundleDisplayName', packageJson.fullName);
      plist = changePlistString(plist, 'CFBundleName', packageJson.name);
      plist = changePlistString(plist, 'CFBundleVersion', packageJson.version);
      plist = changePlistString(plist, 'CFBundleShortVersionString', packageJson.version);
      plist = changePlistString(plist, 'CFBundleIconFile', packageJson.name + '.icns');
      plist = changePlistString(plist, 'CFBundleExecutable', 'node-webkit-no-gpu');
      plist = changePlistString(plist, 'CFBundleIdentifier', 'com.leapmotion.airspace');
      plist = addAirspaceProtocolHandler(plist);

      fs.writeFileSync(infoPlistPath, plist);

      console.log('Wrote OS X version ' + packageJson.version + ' to: ' + buildDir(platform));
      cb(null);
    });
  });
}

async.series([
  setFullVersionNumber,
  function(cb) {
    async.series([
      buildForWindows,
      buildForMac
    ], cb);
  }
], function(err) {
  if (err) {
    throw err;
  }
});
