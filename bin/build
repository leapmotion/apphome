#!/usr/bin/env node

var archiver = require('archiver');
var fs = require('fs-extra');
var path = require('path');

var packageJson = JSON.parse(fs.readFileSync(path.join(__dirname, '..', 'package.json')));
packageJson.window.toolbar = false;

function buildDir(subdir) {
  var buildDir = path.join(__dirname, '..', 'build', subdir || '');
  if (!fs.existsSync(buildDir)) {
    fs.mkdirSync(buildDir);
  }
  return buildDir;
}

function prodDependencies() {
  var deps = Object.keys(packageJson.dependencies);
  return deps.map(function(dep) {
    return path.join('node_modules', dep);
  });
}

var appManifest = [
  'app/',
  'bin/',
  'config/',
  'index.html',
  'node-main.js',
  'static/',
].concat(prodDependencies());

fs.deleteSync(path.join(__dirname, '..', 'build'));
fs.mkdirSync(path.join(__dirname, '..', 'build'));

var appZip = archiver('zip');
var archiveName = packageJson.name + '.nw';
var appZipOutputPath = path.join(buildDir(), archiveName);
var output = fs.createWriteStream(appZipOutputPath);
appZip.pipe(output);

console.log('package.json');
appZip.append(JSON.stringify(packageJson), { name: 'package.json', store: true });

while (appManifest.length > 0) {
  var fileToInclude = appManifest.shift();
  var fullPath = path.join(__dirname, '..', fileToInclude);
  if (fs.statSync(fullPath).isDirectory()) {
    fs.readdirSync(fullPath).forEach(function(file) {
      appManifest.push(path.join(fileToInclude, file));
    });
  } else {
    var normalizedFilename = fileToInclude.replace(/\\/g, '/');
    console.log(normalizedFilename);
    appZip.append(fs.readFileSync(fullPath), { name: normalizedFilename, store: true });
  }
}

function changePlistString(plist, key, newValue) {
  var searchRegex = new RegExp('(<key>' + key + '<\\/key>\\s*<string>)[^<]*(<\\/string>)');
  return plist.replace(searchRegex, '$1' + newValue + '$2');
}

appZip.finalize(function(err, bytesWritten) {
  if (err) {
    throw err;
  }

  console.log(bytesWritten + ' total bytes written to ' + appZipOutputPath);

  fs.copy(path.join(__dirname, '..', 'nw', 'node-webkit-v0.5.1-win-ia32'), buildDir('windows'), function(err) {
    if (err) {
      throw err;
    }
    fs.unlinkSync(path.join(buildDir('windows'), 'nwsnapshot.exe'));
    var executable = fs.readFileSync(path.join(buildDir('windows'), 'nw.exe'));
    var nwArchive = fs.readFileSync(path.join(buildDir(), archiveName));
    fs.writeFileSync(path.join(buildDir('windows'), packageJson.name + '.exe'), Buffer.concat([ executable, nwArchive ]));
    fs.unlinkSync(path.join(buildDir('windows'), 'nw.exe'));

    console.log('Wrote Windows version to: ' + buildDir('windows'));
  });

  fs.copy(path.join(__dirname, '..', 'nw', 'node-webkit-v0.5.1-osx-ia32', 'node-webkit.app'), path.join(buildDir('osx'), packageJson.name + '.app'), function(err) {
    if (err) {
      throw err;
    }

    fs.copy(appZipOutputPath, path.join(buildDir('osx'), packageJson.name + '.app', 'Contents', 'Resources', 'app.nw'), function(err) {
      if (err) {
        throw err;
      }

      var infoPlistPath = path.join(buildDir('osx'), packageJson.name + '.app', 'Contents', 'Info.plist');
      var plist = fs.readFileSync(infoPlistPath, 'utf-8');
      plist = changePlistString(plist, 'CFBundleDisplayName', packageJson.name);
      plist = changePlistString(plist, 'CFBundleName', packageJson.name);
      plist = changePlistString(plist, 'CFBundleVersion', packageJson.version);
      plist = changePlistString(plist, 'CFBundleShortVersionString', packageJson.version);
      fs.writeFileSync(infoPlistPath, plist);

      console.log('Wrote OS X version to: ' + buildDir('osx'));
    });
  });
});
